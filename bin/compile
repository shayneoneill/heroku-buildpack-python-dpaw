#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# Prepend proper path for virtualenv hackery. Will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

mkdir -p $BUILD_DIR $CACHE_DIR

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VIRTUALENV_DIRS="bin include lib"
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"

unset GIT_DIR
export PIP_DOWNLOAD_CACHE

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function virtualenv (){
  python "$ROOT_DIR/src/virtualenv-1.7/virtualenv.py" "$@"
}

##############################################################
# python ldap
# http://bengillies.tiddlyspace.com/bags/bengillies_public/tiddlers/Python-LDAP%20and%20Oracle%20Enterprise%20Linux
##############################################################

cd $BUILD_DIR

if [ -d $CACHE_DIR/.python-ldap ]; then
  cp -R $CACHE_DIR/.python-ldap .
fi
mkdir -p .python-ldap
mkdir -p $CACHE_DIR/.python-ldap

apt-get install python-dev libldap2-dev libsasl2-dev libssl-dev


# Install python-ldap
if [ ! -d $BUILD_DIR/.python-ldap/groff ]; then
  echo "-----> Installing Groff"
  curl -O http://ftp.gnu.org/gnu/groff/groff-1.21.tar.gz
  tar -zxvf groff-1.21.tar.gz
  cd groff-1.21
  ./configure --prefix=$BUILD_DIR/.python-ldap/groff
  #make PROCESSEDEXAMPLEFILES=""
  #make PROCESSEDEXAMPLEFILES="" install
  cd $BUILD_DIR
  cp -R .python-ldap/groff $CACHE_DIR/.python-ldap
fi

echo "-----> Adding soelim to path"
export PATH=$PATH:$BUILD_DIR/.python-ldap/groff/bin

if [ ! -d $BUILD_DIR/.python-ldap/db4 ]; then
  echo "-----> Installing BerkeleyDB"
  curl -O http://download.oracle.com/berkeley-db/db-4.8.24.NC.tar.gz
  tar -zxvf db-4.8.24.NC.tar.gz
  cd db-4.8.24.NC
  cd build_unix
  ../dist/configure --prefix=$BUILD_DIR/.python-ldap/db4
  #make
  #make install
  cd $BUILD_DIR
  cp -R .python-ldap/db4 $CACHE_DIR/.python-ldap
fi

echo "-----> Changing library paths"
export LD_LIBRARY_PATH="/usr/lib:/usr/local/lib:$BUILD_DIR/.python-ldap/db4/lib:/usr/local/ssl/lib"
export LDFLAGS="-L/usr/local/lib -L$BUILD_DIR/.python-ldap/db4/lib -L/usr/local/ssl/lib"
export CPPFLAGS="-I/usr/local/include -I$BUILD_DIR/.python-ldap/db4/include -I/usr/local/ssl/include"
echo $LD_LIBRARY_PATH
echo $LDFLAGS
echo $CPPFLAGS

if [ ! -d $BUILD_DIR/.python-ldap/openldap ]; then
  echo "-----> Fetching and installing openldap"
  curl -O http://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-2.4.33.tgz >/dev/null 2>&1
  echo "-----> Extracting ..."
  #tar -xvf openldap-2.4.33.tgz
  echo "-----> Moving ..."
  echo "-----> Change directories ..."
  #cd openldap-2.4.33
  echo "-----> Configuring ..."
  #./configure --enable-bdb --enable-crypt --with-tls=openssl --prefix=$BUILD_DIR/.python-ldap/openldap
  echo "-----> Installing ..."
  #make depend
  #make
  #make test
  #make install
  apt-get install libldap2-dev
  echo "openldap installed" | indent
  cd $BUILD_DIR
  cp -R .python-ldap/openldap $CACHE_DIR/.python-ldap
fi

##############################################################
# / python ldap
##############################################################

# Reject a non-packaged Django app.
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# Warn a checked-in virtualenv.
if [ -d "lib" ] || [ -d "bin" ]; then
  echo " !     You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
fi

# Reject a conflicting checked-in virtualenv.
if [ -f "lib/python2.7" ]; then
  echo " !     Checked-in virtualenv conflict."
  exit 1;
fi

# Copy artifacts out of cache if exists.
mkdir -p $CACHE_DIR
for dir in $VIRTUALENV_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

# Create virtualenv. Rebuild if corrupt.
set +e
echo "-----> Preparing virtualenv version $(virtualenv --version)"

# Try to create the virtualenv.
OUT=$(virtualenv --distribute --never-download  --prompt=venv . 2>&1)

# If there's an error, purge and recreate.
[ $? -ne 0 ] && {
  echo " !     Virtualenv corrupt, rebuilding."
  for dir in $VIRTUALENV_DIRS; do
    rm -fr $dir &> /dev/null || true
  done
  OUT=$(virtualenv --distribute --never-download  --prompt=venv . )
}
echo "$OUT" | indent

set -e

# Create set-aside .heroku folder.
mkdir -p .heroku

# Pylibmc support.
source $BIN_DIR/steps/pylibmc

# Activate the virtualenv.
echo "-----> Activating virtualenv"
source bin/activate

# Install mercurial, if needed.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | indent
fi

export LD_LIBRARY_PATH="/usr/lib:/usr/local/lib:$BUILD_DIR/.python-ldap/openldap/lib:/usr/local/ssl/lib"
export LDFLAGS="-L/usr/local/lib -L$BUILD_DIR/.python-ldap/openldap/lib -L/usr/local/ssl/lib"
export CPPFLAGS="-I/usr/local/include -I$BUILD_DIR/.python-ldap/openldap/include -I/usr/local/ssl/include"

# Install dependencies.
echo "-----> Installing dependencies using pip version $(pip --version | awk '{print $2}')"
pip install --use-mirrors -r requirements.txt --src ./.heroku/src | indent

#####

pip install -U --no-install python-ldap
cd build/python-ldap
cat setup.cfg
sed "s,library_dirs = \(.*\),library_dirs = $BUILD_DIR/.python-ldap/openldap/lib \1,g" setup.cfg > setup.cfg
sed "s,include_dirs = \(.*\),include_dirs = $BUILD_DIR/.python-ldap/openldap/include \1,g" setup.cfg > setup.cfg
cat setup.cfg
pip install -U .
cd ../..

######

# Django support.
if [ "$NAME" = "Python/Django" ] && ! [ "$DISABLE_INJECTION" ]; then
  source $BIN_DIR/steps/django
fi

# Make virtualenv relocatable.
set +e
OUT=$(virtualenv --relocatable .)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# Store new artifacts in cache.
for dir in $VIRTUALENV_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done
